package com.dp;

public class UniquePaths {

	/**
	 * 个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” )
	 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”） 问总共有多少条不同的路径？ 示例： 输入: m = 3,
	 * n = 2 输出: 3 解释: 从左上角开始，总共有 3 条路径可以到达右下角。 1. 向右 -> 向右 -> 向下 2. 向右 -> 向下 -> 向右
	 * 3. 向下 -> 向右 -> 向右
	 * 
	 * @param args
	 */

	public static int uniquePaths(int m, int n) {
		int rows = n;
		int cols = m;

		int[][] dp = new int[rows][cols];
		for (int i = 0; i < cols; i++)
			dp[0][i] = 1;
		for (int j = 0; j < rows; j++)
			dp[j][0] = 1;
		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols; j++) {
				dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
			}
		}
		return dp[rows - 1][cols - 1];

	}

	public static void main(String[] args) {

		System.out.println(uniquePaths(3, 2));
	}

}
