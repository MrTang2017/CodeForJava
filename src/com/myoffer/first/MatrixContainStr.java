package com.myoffer.first;

/**
 * 
 * 用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。 路径可以从矩阵中的任意一个格子开始， 每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
 * 如果一条路径经过了矩阵中的某一个格子， 则之后不能再次进入这个格子。 例如 a b c e s f c s a d e e 这样的3 X 4
 * 矩阵中包含一条字符串"bcced"的路径， 但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，
 * 路径不能再次进入该格子。
 * 
 * @author 汤吉
 *
 */
public class MatrixContainStr {

	public static boolean hasPath(char[] matrix, int rows, int cols, char[] str) {

		boolean[] flag = new boolean[matrix.length];// 标记数组，走过的字符为true未访问过的false
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (searchStr(matrix, rows, cols, i, j, flag, 0, str)) {
					return true;
				}
			}
		}
		return false;

	}

	// 递归搜索
	private static boolean searchStr(char[] matrix, int rows, int cols, int i, int j, boolean[] flag, int k,
			char[] str) {

		int index = i * cols + j;// 数组中的下标
		if (i < 0 || i >= rows || j < 0 || j >= cols || 
				matrix[index] != str[k] || flag[index] == true) {
			return false;
		}
		if (k == str.length-1) {
			return true;
		}
		flag[index] = true;
		if (searchStr(matrix, rows, cols, i - 1, j, flag, k + 1, str)
				|| searchStr(matrix, rows, cols, i + 1, j, flag, k + 1, str)
				|| searchStr(matrix, rows, cols, i, j + 1, flag, k + 1, str)
				|| searchStr(matrix, rows, cols, i, j - 1, flag, k + 1, str))
			return true;

		flag[index] = false;
		return false;
	}

	public static void main(String[] args) {

	}

}
